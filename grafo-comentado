/***********************************
Grafos

Autor:  Arthur M. Amaral
		Diego R. Garzaro
		Eder E. Hamasaki

Criado em: 15/11/2017
***********************************/

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <limits.h>

// ********** Definições ***********

#define true   		1
#define false  		0
#define TAM_GRAFO  21

// ********** Estruturas ***********

typedef struct vizinho{
	int no;
	int peso;
	char cor[20];
	struct vizinho *prox;
} Vizinho;

typedef struct no{
	// Dados a serem Armazenados
	Vizinho *lista_conexao;
} No;

typedef struct grafo{
	int nos;
	int caminhos;
	No *arranj_nos;
} Grafo;

// *********** Funções *************

Grafo *cria_grafo(int no);
Vizinho *cria_vizinho(int no, int peso, char cor[20]);
int cria_conexao(Grafo *gr, int no_ini, int no_fim, int peso, char cor[20]);
void inicializa_grafo(Grafo *g, int *d, int *p, int s);
void relaxa(Grafo *g, int *d, int *p, int u, int v, int in);
int *dijkstra(Grafo *g, int in, int fim, int caminho[TAM_GRAFO]);
int existe_aberto(Grafo *g, int *aberto);
int menorDist(Grafo *g, int *aberto, int *d);
void imprime_grafo(Grafo *gr);
void imprime_caminho(Grafo *gr, int caminho[TAM_GRAFO]);

// ************* Main **************

int main(){

	Grafo *gr = cria_grafo(TAM_GRAFO);

	cria_conexao(gr,1,2,16,"Vermelho");
	cria_conexao(gr,2,3,14,"Vermelho");
	cria_conexao(gr,3,4,12,"Vermelho");
	cria_conexao(gr,4,5,12,"Vermelho");
	cria_conexao(gr,5,6,14,"Vermelho");

	cria_conexao(gr,2,15,7,"Amarelo");
	cria_conexao(gr,2,8,8,"Amarelo");
	cria_conexao(gr,8,12,11,"Amarelo");
	cria_conexao(gr,15,16,7,"Amarelo");
	cria_conexao(gr,16,17,12,"Amarelo");
	cria_conexao(gr,17,18,9,"Amarelo");
	
	cria_conexao(gr,3,16,11,"Roxo");
	cria_conexao(gr,3,13,13,"Roxo");
	cria_conexao(gr,10,13,11,"Roxo");
	cria_conexao(gr,16,19,13,"Roxo");
	cria_conexao(gr,19,20,12,"Roxo");
	
	cria_conexao(gr,5,17,10,"Azul");
	cria_conexao(gr,5,14,9,"Azul");
	cria_conexao(gr,9,12,17,"Azul");
	cria_conexao(gr,9,13,7,"Azul");
	cria_conexao(gr,13,14,9,"Azul");

	cria_conexao(gr,6,11,15,"Verde");
	cria_conexao(gr,7,8,15,"Verde");
	cria_conexao(gr,8,9,11,"Verde");
	cria_conexao(gr,9,10,13,"Verde");
	cria_conexao(gr,10,11,16,"Verde");


	printf("\n\n");

	int in, fim, caminho[TAM_GRAFO], i;

	for(i=0;i<TAM_GRAFO;i++){
		caminho[i]=-1;
	}

	do{
		printf("Digite o ponto inicial: ");
		scanf("%d", &in);
	}while(in<0 || in>20);

	do{
		printf("Digite o ponto final: ");
		scanf("%d", &fim); 
	}while(fim<0 || fim>20);

	int *r = dijkstra(gr,in,fim,caminho);

	printf("\nIr do ponto %d ao %d:\n", in, fim);

	imprime_caminho(gr,caminho);

	return 0;
}

// *********** Funções *************

Grafo *cria_grafo(int no){																				// Cria o grafo com seus pontos e caminhos que os interligam
	Grafo *g = (Grafo *) malloc(sizeof(Grafo));															// Pede espeaço ao sistema
	g->nos = no;																						// Faz as definições dos pontos
	g->caminhos = 0;
	g->arranj_nos = (No *) malloc(no*sizeof(No));														// Cria o numero de adjacencias de acordo com o numero de nos
	int i;
	for(i=0;i<no;i++)
		g->arranj_nos[i].lista_conexao = NULL;
	return(g);
}

Vizinho *cria_vizinho(int no, int peso, char cor[20]){													// Definições iniciais dos adjacentes
	Vizinho *temp = (Vizinho *) malloc(sizeof(Vizinho));
	temp->no = no;
	temp->peso = peso;
	strcpy(temp->cor, cor);
	temp->prox = NULL;
	return(temp);
}

int cria_conexao(Grafo *gr, int no_ini, int no_fim, int peso, char cor[20]){							// Cria conexão entre um ponto e outro
	if(!gr) return(false);																				// Nao foi possível criar conexão
	if((no_fim<0) || (no_fim>=gr->nos)) return(false);													// Condições
	if((no_ini<0) || (no_ini>=gr->nos)) return(false);
	Vizinho *novo = cria_vizinho(no_fim, peso, cor);													// Cria adjacente do ponto final
	novo->prox = gr->arranj_nos[no_ini].lista_conexao;													// Adiciona o ponto inicial à lista de adjacentes do ponto final
	gr->arranj_nos[no_ini].lista_conexao = novo;														// Atribui à lista de adjacentes do ponto inicial, o ponto final
	novo = cria_vizinho(no_ini, peso, cor);																// Cria adjacentes do ponto inicial
	novo->prox = gr->arranj_nos[no_fim].lista_conexao;
	gr->arranj_nos[no_fim].lista_conexao = novo;
	gr->caminhos++;																						// Incrementa a contagem de caminhos totais do grafo
	return(true);																						// Foi possível criar conexão
}

void inicializa_grafo(Grafo *g, int *d, int *p, int s){													// Inicializa o grafo
	int v;
	for(v=0;v<g->nos;v++){																				// Loop para inicializar todos os pontos do grafo
		d[v] = INT_MAX/2;																				// Atribui a distancia de cada ponto
		p[v] = 0;																						// Define o precedente de cada ponto
	}
	d[s] = 0;																							// Dfine a distancia inicial do ponto inicial
}

void relaxa(Grafo *g, int *d, int *p, int u, int v, int in){											// Faz uma varredura entre todos os adjacentes, atualizando suas respectivas distancias
	int op=0;																							// Declaração de variáveis auxiliares				
	int adicional = 0;
	Vizinho *ant = g->arranj_nos[u].lista_conexao;														// Cria lista dos nós adjacentes ao ponto 'u'
	if(u==in) op=v;																						// Condição na verificação da cor entre os caminhos
	else op=p[u];
	while(ant && ant->no != op) {																		// Varre os pontos adjacentes do ponto 'u' até encontrar o ponto anterior (precendete de 'u')
		ant = ant->prox;
	}
	Vizinho *ad = g->arranj_nos[u].lista_conexao;														// Cria lista de adjacentes ao ponto 'u'
	while(ad && ad->no != v){																			// Varre os pontos adjacentes até encontrar do ponto 'u'
		ad = ad->prox;
	}

	if(p[u]!=0 && ant->cor[3]!=ad->cor[3]){																// Condição para acrescentar 6 min em mudança de cor de caminho
		adicional = 6;
	}
	else{
		adicional = 0;
	}

	if(ad){																								// Atualiza a distancia dos pontos adjacentes ao ponto 'u'
		if(d[v] > (d[u] + ad->peso + adicional)){
			d[v] = d[u] + ad->peso + adicional;
			p[v] = u;																					// Define o precedente
		}
	}
}

int *dijkstra(Grafo *g, int in, int fim, int caminho[TAM_GRAFO]){										// Dijkstra (retorna um vetor de inteiro com a distancia do ponto origem ate cada ponto)
	int *d = (int *) malloc(g->nos*sizeof(int));														// Cria o vetor de inteiro das distancias
	int p[g->nos];																						// Cria variável de precedentes
	int aberto[g->nos];																					// Variável dos nós abertos

	inicializa_grafo(g,d,p,in);																			// Inicializa o grafo

	int i;
	for(i=0;i<g->nos;i++) aberto[i] = true;																// Abre todos os pontos

	while(existe_aberto(g,aberto)){																		// Loop (enquanto houver ponto aberto)
		int u = menorDist(g,aberto,d);																	// Atribui o ponto que tiver a menor distancia e atribui a variável 'u'
		aberto[u] = false;																				// Fecha variável 'u'
		Vizinho *ad = g->arranj_nos[u].lista_conexao;													// Cria lista de todas os adjacentes do ponto 'u'
		while(ad){																						// Varre todos os pontos adjacentes de 'u', atualizando suas respectivas distancias
			relaxa(g,d,p,u,ad->no,in);																	// Atualiza as distancias
			ad = ad->prox;																				// Pula para o proximo adjacente
		}

		if(!existe_aberto(g,aberto)){																	// Condição (se todos os pontos estiverem fechados)
			int j, k, z=0;																				// Cria variáveis auxiliares
				caminho[TAM_GRAFO]=fim;																	// Atribui à última posição do vetor caminho, o ponto final
				for(j=fim,k=TAM_GRAFO-1;j!=in;k--){														// Loop (Enquanto nao percorreu os pontos do caminho "final->inicial")
					caminho[k] = p[j];																	// Atribui ao vetor o precedente dos pontos
					j = p[j];																			// Atribui ao ponto referencia, o seu precedente
					z++;																				// Incrementa a variável que conta a quantidade de pontos a serem percorridos
				}
				caminho[0]=z;																			// Atribui a posição 0 do vetor "caminho" a quantidade de pontos percorridos
		}
	}
	return(d);																							// Retorna o vetor de distancia de todos os pontos
}

int existe_aberto(Grafo *g, int *aberto){																// Verifica se existem pontos abertos
	int i;
	for(i=0;i<g->nos;i++)																				// Varre todos os pontos
		if(aberto[i]) return(true);																		// Se houver ponto aberto, retorna 1
	return(false);																						// Senão, retorna 0
}

int menorDist(Grafo *g, int *aberto, int *d){															// Encontra o ponto que possui a menor distancia
	int i;
	for(i=0;i<g->nos;i++)																				// Encontra o próximo ponto aberto
		if(aberto[i]) break;
	if(i==g->nos) return(-1);																			// Indica que nao encontrou nenhum ponto aberto
	int menor = i;
	for(i=menor+1;i<g->nos;i++)																			// Loop para encontrar o ponto aberto que tiver a menor distancia
		if(aberto[i] && (d[menor]>d[i]))																// Se ponto estiver aberto E a distancia do ponto seguinte for menor que a do ponto atual
			menor = i;																					// Atualiza o ponto que possui a menor distancia
	return(menor);																						// Retorna o ponto que possui a menor distancia
}

void imprime_caminho(Grafo *gr, int caminho[TAM_GRAFO]){												// Imprime os caminhos que devem ser percorridos
	int i, k, z = caminho[0], dist=0;																	// Declaração das variáveis auxiliares
	char linha_ant = 0;
	k = TAM_GRAFO-caminho[0];																			// Posição do vetor do primeiro ponto
	printf("\n");

	for(i=0;i<z;i++){	// Loop
		Vizinho *ad = gr->arranj_nos[caminho[k+i]].lista_conexao;										// Cria variável tipo estrutura dos pontos adjacentes (vizinhos)
		while(ad->no != caminho[k+(i+1)] && i<z){														// Enquanto ponto adjacente != do proximo ponto do grafo
			ad=ad->prox;																				// Muda de adjacente
		}
		if(i==0) linha_ant = ad->cor[3];																// Atribui a linha inicial a cor da linha do primeiro ponto
		if(ad->cor[3]==linha_ant){																		// Verifica se a linha atual é igual a linha anterior
			dist = dist + ad->peso;																		// Soma as distancias
			printf("%d --%s(%d)--> %d\n", caminho[k+i], ad->cor, ad->peso, caminho[k+(i+1)]);			// Imprime na tela o ponto inicial, caminho e ponto final
		}
		else{
			linha_ant = ad->cor[3];																		// Seta a cor da linha anterior com a cor da linha atual
			dist = dist + 6 + ad->peso;																	// Atualiza a distancia total, junto com o acrescimo da mudança de cor
			printf("%d --%s(%d+6)--> %d\n", caminho[k+i], ad->cor, ad->peso, caminho[k+(i+1)]);			// Imprime na tela
		}
	}
	printf("\nTempo Total: %d minutos\n", dist);														// Imprime na tela o tempo total do percursso
}
